[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Quarto Blog",
    "section": "",
    "text": "tqdm Python Library\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSimple Visualisation\n\n\n\n\n\n\nML\n\n\n\n\n\n\n\n\n\nFeb 14, 2025\n\n\nNipun Batra\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome\n\n\n\n\n\nWelcome Post\n\n\n\n\n\nFeb 14, 2025\n\n\nNipun Batra\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/welcome.html",
    "href": "posts/welcome.html",
    "title": "Welcome",
    "section": "",
    "text": "Welcome\nHello world, this is my first blog post.\nI can write in markdown\nprint(\"Hello World\")\nI can also write math equations:\n\\[\ny = x^2\n\\]\nI can create lists easily:\n\nOne\nTwo\n\nI can also create numbered lists:\n\nOne\nTwo\n\nOr, create a table:\n\n\n\nName\nAge\n\n\n\n\nAlice\n20\n\n\nBob\n21"
  },
  {
    "objectID": "posts/Exposition_AssignmentJ017 (2).html",
    "href": "posts/Exposition_AssignmentJ017 (2).html",
    "title": "tqdm Python Library",
    "section": "",
    "text": "Group:J017\nMembers:\n\nBoinapally Dhanvini-24110079\nBollineni Snehitha Rao-24110081\nPaleti Nikhitha Chowdary-24110233\n\nIntroduction to python library:tqdm:\ntqdm is a Python package that produces progress bars for loops. It is meant to be fast, versatile, and convenient. Its name is based on the Arabic word taqadum (meaning “progress”) and is also an abbreviation for te quiero demasiado (“I love you so much” in Spanish).\nWhen executing loops in programming, it’s frequently useful to know how far the process has proceeded. One technique to accomplish this is to print the number of the current loop, but it has some issues: - There can be too many print statements, which slow things down. - It does not indicate the speed of the loop. - There is no indication of the remaining time. - The data isn’t neatly presented in one location.\nCorrecting them manually requires additional effort and might not be suited for other scenarios. tqdm addresses all these issues by giving the flexibility to easily attach a tidy, configurable progress bar to loops without slowing them down.\ntqdm can be applied in a wide range of areas: - It makes users observe the processing of tasks such as data processing or file download. - Developers can utilize it for debugging and error tracking, for example, during machine learning training. - It’s an excellent tool to use when teaching Python. - The command-line interface (CLI) version is useful for system administrators who want to track data flow in scripts.\nWith tqdm, it is easy and fast to add progress bars, and coding becomes more efficient and user-friendly.\nInstallation of tqdm python library:\n\npip install tqdm\n\nDefaulting to user installation because normal site-packages is not writeable\nRequirement already satisfied: tqdm in c:\\users\\dell\\appdata\\roaming\\python\\python312\\site-packages (4.67.1)\nRequirement already satisfied: colorama in c:\\users\\dell\\appdata\\roaming\\python\\python312\\site-packages (from tqdm) (0.4.6)\nNote: you may need to restart the kernel to use updated packages.\n\n\n\n[notice] A new release of pip is available: 24.3.1 -&gt; 25.0.1\n[notice] To update, run: python.exe -m pip install --upgrade pip\n\n\nTo create a progress bar, we use the tqdm() function from the tqdm module to wrap our iterable. Here’s a simple example: the time.sleep(0.01) function acts as a placeholder for the actual code that would run during each iteration.\n\nfrom tqdm import tqdm\nimport time\nfor i in tqdm(range(1000)):\n    time.sleep(0.01)\n\n100%|██████████| 1000/1000 [00:11&lt;00:00, 88.18it/s]\n\n\nKEY FEATURES OF TQDM AND IT’S USECASES (With few examples):\n1.Basic Loop Progress Bar:\nThis feature in tqdm tracks the loop execution and gives a progress bar which :\n✔ Shows percentage completed\n✔ Estimates remaining time\n✔ Displays iterations per second(it/s)\nIt is also called as Python Iterable Wrapper as it wraps around python iterables.\nWhat Does Each Iteration Do?\ntqdm(range(10)) → Tqdm wraps range(10), so the progress of the loop is tracked by tqdm.\ntime.sleep(1) → Introduces a 1-second pause per iteration (emulating a long-running process).\ntqdm updates the progress bar in real time, displaying:\n1)Iterations done / Total iterations\n2)Elapsed time\n3)Iterations per second\n\n#Example\nfrom tqdm import tqdm\nimport time\n\nfor i in tqdm(range(10)):\n    time.sleep(1)\n\n100%|██████████| 10/10 [00:10&lt;00:00,  1.00s/it]\n\n\nThese is the outputs while the code is running:\n\n\n\nimage.png\n\n\n\n\n\nimage.png\n\n\n\n\n\nimage.png\n\n\n2.Works with map():\nTqdm can monitor the execution of map() functions:\ntqdm can monitor the execution of map() functions, which makes it helpful for parallel processing, data transformation, and big computations.\nExplanation for below code:\n✔ map(process, data): Calls process(n) for each value in data.\n✔ tqdm(., total=len(data)): Wraps map() to show a progress bar.\n✔ desc=“Processing Data”: Adds a custom label to the bar.\n\nfrom tqdm import tqdm\nimport time\n\ndef process(x):\n    time.sleep(0.5)\n    return x * x\n\nresults = list(tqdm(map(process, range(10)), total=10, desc=\"Processing\"))\n\nProcessing: 100%|██████████| 10/10 [00:05&lt;00:00,  1.98it/s]\n\n\nThese are the outputs when the code is running:\n\n\n\nScreenshot 2025-02-25 134343.png\n\n\n\n\n\nScreenshot 2025-02-25 134355.png\n\n\n\n\n\nScreenshot 2025-02-25 134402.png\n\n\n3.Pandas Support:\nTqdm integrates seamlessly with Pandas, adding progress bars to progress_apply():\ntqdm is well-supported with Pandas and will include a progress bar when using .progress_apply(). This would be helpful for large datasets for data processing, feature engineering, and data cleaning operations.\nExplanation for below code:\n✔ tqdm.pandas() → Makes tqdm progress bars available for pandas operations.\n✔ df[‘values’].progress_apply(process) → Displays a progress bar as process(x) is applied to every row.\n\nimport pandas as pd\nfrom tqdm import tqdm\nimport time\n\ntqdm.pandas()\ndf = pd.DataFrame({'A': range(1000)})\ndf['B'] = df['A'].progress_apply(lambda x: (time.sleep(0.01), x**2)[1])\n\n\n---------------------------------------------------------------------------\nModuleNotFoundError                       Traceback (most recent call last)\nCell In[8], line 1\n----&gt; 1 import pandas as pd\n      2 from tqdm import tqdm\n      3 import time\n\nModuleNotFoundError: No module named 'pandas'\n\n\n\nThe changes in otput while the code is running:\n\n\n\nimage.png\n\n\n\n\n\nimage.png\n\n\n\n#Without using time.sleep()\nimport pandas as pd\nfrom tqdm import tqdm\n\ntqdm.pandas()\ndf = pd.DataFrame({'A': range(1000)})\ndf['B'] = df['A'].progress_apply(lambda x: x**2)\n#Without time.sleep(0.01), the operation runs extremely fast since squaring a number is quick resulting in a high iteration speed (e.g., 143,512 it/s).\n#Adding time.sleep(0.01) forces a delay in each iteration, slowing down execution to around 97 it/s, making the progress bar update much slower.\n\n100%|██████████| 1000/1000 [00:00&lt;00:00, 341889.79it/s]\n\n\n4.Nested Bars:\nTqdm can track inner and outer loops simultaneously:\nExplanation:\n✔ tqdm(range(outer_loops), desc=“Outer Loop”) → Monitors the outer loop.\n✔ tqdm(range(inner_loops), desc=“Inner Loop”, leave=False) → Monitors the inner loop and suppresses it after it is done.\n✔ leave=False → Avoids clutter by suppressing completed inner loop progress bars.\n\nfrom tqdm.notebook import tqdm  # Use notebook version\nimport time\n\nfor i in tqdm(range(3), desc=\"Outer Loop\", leave=True):\n    for j in tqdm(range(5), desc=\"Inner Loop\", leave=True):\n        time.sleep(0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\nThese are the outputs when the code is running:\n\n\n\nScreenshot 2025-02-25 134550.png\n\n\n\n\n\nScreenshot 2025-02-25 134604.png\n\n\n\n\n\nScreenshot 2025-02-25 135312.png\n\n\n\n\n\nScreenshot 2025-02-25 135320.png\n\n\n\nfrom tqdm import tqdm # Import the tqdm function from the tqdm library\nimport time\n\nfor i in tqdm(range(3), desc=\"Outer Loop\"):\n    for j in tqdm(range(5), desc=\"Inner Loop\", leave=False):\n        time.sleep(0.5)  # Simulating work\n\nOuter Loop:   0%|          | 0/3 [00:00&lt;?, ?it/s]\nInner Loop:   0%|          | 0/5 [00:00&lt;?, ?it/s]\nInner Loop:  20%|██        | 1/5 [00:00&lt;00:02,  2.00it/s]\nInner Loop:  40%|████      | 2/5 [00:01&lt;00:01,  1.99it/s]\nInner Loop:  60%|██████    | 3/5 [00:01&lt;00:01,  1.99it/s]\nInner Loop:  80%|████████  | 4/5 [00:02&lt;00:00,  1.99it/s]\nInner Loop: 100%|██████████| 5/5 [00:02&lt;00:00,  1.99it/s]\nOuter Loop:  33%|███▎      | 1/3 [00:02&lt;00:05,  2.51s/it]\nInner Loop:   0%|          | 0/5 [00:00&lt;?, ?it/s]\nInner Loop:  20%|██        | 1/5 [00:00&lt;00:02,  2.00it/s]\nInner Loop:  40%|████      | 2/5 [00:01&lt;00:01,  1.99it/s]\nInner Loop:  60%|██████    | 3/5 [00:01&lt;00:01,  1.99it/s]\nInner Loop:  80%|████████  | 4/5 [00:02&lt;00:00,  1.99it/s]\nInner Loop: 100%|██████████| 5/5 [00:02&lt;00:00,  1.99it/s]\nOuter Loop:  67%|██████▋   | 2/3 [00:05&lt;00:02,  2.51s/it]\nInner Loop:   0%|          | 0/5 [00:00&lt;?, ?it/s]\nInner Loop:  20%|██        | 1/5 [00:00&lt;00:02,  2.00it/s]\nInner Loop:  40%|████      | 2/5 [00:01&lt;00:01,  1.99it/s]\nInner Loop:  60%|██████    | 3/5 [00:01&lt;00:01,  1.99it/s]\nInner Loop:  80%|████████  | 4/5 [00:02&lt;00:00,  1.99it/s]\nInner Loop: 100%|██████████| 5/5 [00:02&lt;00:00,  1.99it/s]\nOuter Loop: 100%|██████████| 3/3 [00:07&lt;00:00,  2.51s/it]\n\n\nThese are the outputs while the code is running:\n\n\n\nScreenshot 2025-02-25 135337.png\n\n\n\n\n\nScreenshot 2025-02-25 135352.png\n\n\n\n\n\nScreenshot 2025-02-25 135402.png\n\n\n\nfrom tqdm.notebook import tqdm  # Use notebook version\nimport time\n\nfor i in tqdm(range(3), desc=\"Outer Loop\", leave=True):\n    for j in tqdm(range(5), desc=\"Inner Loop\", leave=False):\n        time.sleep(0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\nThese are the outputs while the code is running:\n\n\n\nScreenshot 2025-02-25 135413.png\n\n\n\n\n\nScreenshot 2025-02-25 135424.png\n\n\n\n\n\nScreenshot 2025-02-25 135453.png\n\n\n\n\n\nScreenshot 2025-02-25 135505.png\n\n\n\nfrom tqdm.notebook import tqdm  # Use notebook version\nimport time\n\nfor i in tqdm(range(3), desc=\"Outer Loop\", leave=False):\n    for j in tqdm(range(5), desc=\"Inner Loop\", leave=False):\n        time.sleep(0.5)\n#With leave=True (default), progress bars remain visible after completion, useful for tracking all iterations.\n#With leave=False, the progress bar disappears once the loop finishes\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe code output while it is running are same as the above code, but there is no utput seen.\n5.Customization:\ntqdm provides multiple customization options to enhance the progress bar’ appearance, format, and behavior. Here are some key ways to customize it:\nExplanation:\n{desc} Displays the custom description (desc=” Processing Data”)\n{percentage:3.0f}% Shows progress percentage with 3-character padding (3.0f ensures no decimal places)\n{bar} The progress bar itself\n{n_fmt} Current iteration count (formatted for readability)\n{total_fmt} Total iterations (formatted for readability)\n” iters” Static text added at the end\n\nfrom tqdm.notebook import tqdm\nimport time\n\n# Customizing tqdm progress bar\nfor i in tqdm(\n    range(10),\n    desc=\" Processing Data\",  # Custom description\n    colour=\"green\",  # Change progress bar color\n    ncols=500,  # Set custom width\n    bar_format=\"{desc}: {percentage:3.0f}%|{bar}| {n_fmt}/{total_fmt} iters\",  # Custom format\n    leave=True,  # Remove completed bars\n):\n    time.sleep(0.3)  # Simulating a delay\n\n\n\n\nThese are the outputs while the above code is running:\n\n\n\nScreenshot 2025-02-25 135604.png\n\n\n\n\n\nScreenshot 2025-02-25 135611.png\n\n\n6.tqdm with Lists and Enumerate:\nTrack progress when iterating over a list.\n\nmy_list = [\"Task 1\", \"Task 2\", \"Task 3\"]\nfor task in tqdm(my_list, desc=\"Processing Tasks\"):\n    time.sleep(0.5)  # Simulating processing time\n\n\n\n\nThese are the outputs while the above code is running:\n\n\n\nimage.png\n\n\n\n\n\nimage.png\n\n\n\n\n\nimage.png\n\n\nExplanation:\n✔ tqdm(my_list, desc=“Processing tasks”) → Wraps the list with a progress bar.\n✔ time.sleep(0.5) → Simulates a slow operation.\nMonitors list processing in real-time\n\nfor index, item in tqdm(enumerate(my_list), total=len(my_list), desc=\"Processing Tasks\"):\n    time.sleep(0.5)  # Simulating work\n\n\n\n\nThese are the outputs for the bove code while it is running:\n\n\n\nScreenshot 2025-02-25 135635.png\n\n\n\n\n\nScreenshot 2025-02-25 135646.png\n\n\n\n\n\nScreenshot 2025-02-25 135653.png\n\n\nExplanation:\n✔ enumerate(my_list) → Returns value and index while iterating.\n✔ total=len(my_list) → Maintains the progress bar correctly updated.\n✔ desc=“Processing Tasks” → Includes a personalized description.\nMonitors both index and value processing\n7.File Downloads:\nTqdm can monitor the progress of large downloads:\ntqdm is able to monitor the progress of downloading large files, displaying a live progress bar during download. This comes in handy when downloading large data sets, media, or software updates, allowing you to keep track of the speed and time to complete.\n\nimport requests  # Handles HTTP requests\nfrom tqdm import tqdm  # Displays a progress bar\n\n# Define the file URL\nurl = \"https://example.com/large_file.zip\"\n\n# Initiate the HTTP request with streaming enabled\nresponse = requests.get(url, stream=True)\n\n# Extract total file size from headers (returns 0 if not available)\nfile_size = int(response.headers.get('content-length', 0))\n\n# Open the file for writing in binary mode while using tqdm to track progress\nwith open(\"file.zip\", \"wb\") as file, tqdm(\n    desc=\"Downloading\",  # Custom description for the progress bar\n    total=file_size,  # Total number of bytes expected\n    unit=\"B\",  # Display progress in Bytes\n    unit_scale=True,  # Automatically adjust units (KB, MB, GB)\n    unit_divisor=1024,  # Use 1024 for binary conversion (instead of 1000)\n) as bar:\n\n    # Iterate over the response content in chunks of 1 KB\n    for chunk in response.iter_content(chunk_size=1024):\n        file.write(chunk)  # Write the chunk to file\n        bar.update(len(chunk))  # Increment progress bar by the chunk size\n\nDownloading: 100%|██████████| 1.23k/1.23k [00:00&lt;00:00, 6.02MB/s]\n\n\nThe above code has no sleep, so no time delay, the final output is directly shown as above.\nExplanation:\n✔ requests.get(url, stream=True) → Downloads the file in pieces rather than downloading it all at once.\n✔ response.headers.get(‘content-length’,0) → Obtains the file size to monitor progress.\n✔ tqdm(., total=file_size, unit=“B”, unit_scale=True) → Displays download progress in bytes (B), KB, MB, or GB.\n✔ response.iter_content(chunk_size=block_size) → Reads the file in small pieces (1KB) to conserve memory.\n✔ bar.update(len(chunk)) → Advances the progress bar with each piece.\n8.Command-Line Interface (CLI) in tqdm:\nA Command-Line Interface (CLI) is when the user uses a terminal to give commands to a program, as opposed to the graphical user interface. tqdm comes with a CLI mode to follow progress through terminal commands. In the command line, a pipe (|) is how to take output from one command and input to another.\n1.count lines of text in all *.txt files:\ncode: $ cat *.txt | wc -l\nOutput: 1075075\n2.same as above same but with continuously updating progress information:\ncode:$ cat *.txt | python3 -m tqdm –unit loc –unit_scale | wc -l\nOutput:1.08Mloc [00:07, 142kloc/s]\n3.same if total is known:\ncode: $ cat *.txt | python3 -m tqdm –unit loc –unit_scale –total 1075075 | wc -l\noutput:\n100%|#####################################| 1.08/1.08M [00:07&lt;00:00, 142kloc/s]\n1075075\n9.tqdm with Parallel Processing (Threading & Multiprocessing):\nParallel processing can be used to accelerate execution by executing multiple tasks simultaneously. Progress tracing in parallel execution, however, can be problematic. tqdm is compatible with Threading and Multiprocessing for visualizing progress in concurrent tasks. Threading is beneficial for I/O-bound tasks (downloading files, web scraping, etc.). Multiprocessing is better for CPU-bound tasks (e.g., data processing, machine learning).\n\nfrom tqdm import tqdm\nfrom concurrent.futures import ThreadPoolExecutor\nimport time\n\ndef task(n):\n    time.sleep(0.5)  # Simulate work\n    return n * n\n\nwith ThreadPoolExecutor(max_workers=4) as executor:\n    results = list(tqdm(executor.map(task, range(10)), total=10, desc=\"Parallel Processing\"))\n\nParallel Processing: 100%|██████████| 10/10 [00:01&lt;00:00,  6.67it/s]\n\n\nThe output changes while the code runs:\n\n\n\nimage.png\n\n\n\n\n\nimage.png\n\n\nExplanation for the above code:\n1)Function task(n): Simulates a long-running operation with time.sleep(0.5).\n2)Returns n  n (square of n). Using ThreadPoolExecutor(max_workers=4)*:\nInitializes a thread pool of 4 worker threads, and tasks can run in parallel. Each worker thread takes a number from range(10) and executes task(n).\n3)Using executor.map(task, range(10)):\nMaps the task(n) function to numbers 0-9 in parallel using 4 threads. If max_workers=4, a maximum of 4 numbers are processed simultaneously.\n4)Using tqdm to Track Progress:\ntqdm(executor.map(.), total=10, desc=“Parallel Processing”) Shows a progress bar while the tasks finish.\n\nfrom tqdm import tqdm\nfrom concurrent.futures import ProcessPoolExecutor\nimport time\n\n# Function that simulates a CPU-heavy task\ndef compute(n):\n    time.sleep(0.5)  # Simulating work\n    return n * n\n\n# Using ProcessPoolExecutor with tqdm\nwith ProcessPoolExecutor(max_workers=4) as executor:\n    results = list(tqdm(executor.map(compute, range(10)), total=10, desc=\"Multiprocessing Example\"))\n\nMultiprocessing Example: 100%|██████████| 10/10 [00:01&lt;00:00,  6.64it/s]\n\n\nThe outputs while the code runs:\n\n\n\nimage.png\n\n\n\n\n\nimage.png\n\n\nExplanation:\n1)Function compute(n): Simulates a CPU-intensive task with time.sleep(0.5) and Returns n * n (square of n).\n2)Using ProcessPoolExecutor(max_workers=4):\nCreates a pool of 4 processes to execute tasks in parallel and each process picks a number from range(10) and applies compute(n). Unlike threads, each process runs in its own memory space, avoiding GIL (Global Interpreter Lock) bottlenecks.\n3)Using executor.map(compute, range(10)):\nMaps the compute(n) function to numbers 0-9 concurrently using 4 processes. If max_workers=4, up to 4 numbers are processed at the same time.\n4)Using tqdm to Track Progress:\ntqdm(executor.map(…), total=10, desc=“Multiprocessing Example”) Displays a progress bar while tasks complete.\nEXAMPLES OF TQDM\n1. Comparing Loop Execution(Without and with tqdm):\n\nWithout tqdm(No progress feedback)\n\n\nimport time\n\nfor i in range(10):\n    time.sleep(0.5)\nprint(\"Task Done!\")\n\nTask Done!\n\n\nExpected Output:\n\nAfter 5 Seconds, it gives the message:\n\nTask Done!\n\nWith tqdm(Real-time tracking)\n\n\nfrom tqdm import tqdm\nimport time\n\nfor i in tqdm(range(10), desc=\"Processing\"):\n    time.sleep(0.5)\nprint(\"Task Done!\")\n\nProcessing: 100%|██████████| 10/10 [00:05&lt;00:00,  2.00it/s]\n\n\nTask Done!\n\n\n\n\n\nExpected Output:\nA real-time progress bar appears in the cell output, which update for every 0.5 seconds:\nProcessing:  10%|██          | 1/10 [00:00&lt;00:04,  2.00s/it]\nProcessing:  20%|████        | 2/10 [00:01&lt;00:04,  2.00s/it]\nProcessing:  30%|██████      | 3/10 [00:01&lt;00:03,  2.00s/it]\n...\nProcessing: 100%|██████████| 10/10 [00:05&lt;00:00,  2.00s/it]\nTask Done!\n\n✔ Progress bar updates in real-time.\n2. File Downlaod Progress:\n\nimport requests\nfrom tqdm import tqdm\nimport time\nurl = \"https://example.com/largefile.zip\"\nresponse = requests.get(url, stream=True)\n\ntotal_size = int(response.headers.get('content-length', 0))\nblock_size = 1024\n\nwith open(\"downloaded_file.zip\", \"wb\") as file, tqdm(\n    total=total_size, unit=\"B\", unit_scale=True, desc=\"Downloading\"\n) as progress_bar:\n    for data in response.iter_content(block_size):\n        file.write(data)\n        progress_bar.update(len(data))\n\nDownloading: 100%|██████████| 1.26k/1.26k [00:00&lt;00:00, 1.91MB/s]\n\n\nExpected Output(Example of a 10MB File):\nDownloading:  10%|███        | 1.0M/10M [00:01&lt;00:09,  1.0MB/s]\nDownloading:  20%|█████      | 2.0M/10M [00:02&lt;00:08,  1.0MB/s]\n...\nDownloading: 100%|██████████| 10M/10M [00:10&lt;00:00,  1.0MB/s]\n\n✔ Shows real-time file download progress.\n3. Processing a Large Dataset(pandas):\n\nimport pandas as pd\nfrom tqdm import tqdm\n\ntqdm.pandas(desc=\"Processing Data\")\n\ndf = pd.DataFrame({'col1': range(1000)})\ndf['col2'] = df['col1'].progress_apply(lambda x: x * 2)\n\nProcessing Data: 100%|██████████| 1000/1000 [00:00&lt;00:00, 119720.96it/s]\n\n\nExpected Output:\nProcessing Data: 100%|██████████| 1000/1000 [00:00&lt;00:00, 119720.96it/s]\n✔ Shows how many rows have been processed.\n4. Multi-threading with tqdm:\n\nfrom tqdm import tqdm\nimport time\nfrom concurrent.futures import ThreadPoolExecutor\n\ndef task(n):\n    time.sleep(n)\n    return n\n\nwith ThreadPoolExecutor(max_workers=3) as executor:\n    results = list(tqdm(executor.map(task, [2, 3, 1]), total=3, desc=\"Threads\"))\n\nThreads: 100%|██████████| 3/3 [00:02&lt;00:00,  1.00it/s]\n\n\nExpected Output:\nThreads: 100%|██████████| 3/3 [00:03&lt;00:00,  1.00s/it]\n\n✔ Tracks the progress of multi-threaded tasks.\n5. Nested Progress Bars:\n\nfrom tqdm import trange\nimport time\n\nfor i in trange(3, desc=\"Outer Loop\"):\n    for j in trange(5, desc=\"Inner Loop\", leave=False):\n        time.sleep(0.2)\n\nOuter Loop:   0%|          | 0/3 [00:00&lt;?, ?it/s]\nInner Loop:   0%|          | 0/5 [00:00&lt;?, ?it/s]\nInner Loop:  20%|██        | 1/5 [00:00&lt;00:00,  5.00it/s]\nInner Loop:  40%|████      | 2/5 [00:00&lt;00:00,  4.97it/s]\nInner Loop:  60%|██████    | 3/5 [00:00&lt;00:00,  4.95it/s]\nInner Loop:  80%|████████  | 4/5 [00:00&lt;00:00,  4.94it/s]\nInner Loop: 100%|██████████| 5/5 [00:01&lt;00:00,  4.94it/s]\nOuter Loop:  33%|███▎      | 1/3 [00:01&lt;00:02,  1.02s/it]\nInner Loop:   0%|          | 0/5 [00:00&lt;?, ?it/s]\nInner Loop:  20%|██        | 1/5 [00:00&lt;00:00,  5.00it/s]\nInner Loop:  40%|████      | 2/5 [00:00&lt;00:00,  4.96it/s]\nInner Loop:  60%|██████    | 3/5 [00:00&lt;00:00,  4.95it/s]\nInner Loop:  80%|████████  | 4/5 [00:00&lt;00:00,  4.94it/s]\nInner Loop: 100%|██████████| 5/5 [00:01&lt;00:00,  4.94it/s]\nOuter Loop:  67%|██████▋   | 2/3 [00:02&lt;00:01,  1.02s/it]\nInner Loop:   0%|          | 0/5 [00:00&lt;?, ?it/s]\nInner Loop:  20%|██        | 1/5 [00:00&lt;00:00,  5.00it/s]\nInner Loop:  40%|████      | 2/5 [00:00&lt;00:00,  4.96it/s]\nInner Loop:  60%|██████    | 3/5 [00:00&lt;00:00,  4.95it/s]\nInner Loop:  80%|████████  | 4/5 [00:00&lt;00:00,  4.94it/s]\nInner Loop: 100%|██████████| 5/5 [00:01&lt;00:00,  4.94it/s]\nOuter Loop: 100%|██████████| 3/3 [00:03&lt;00:00,  1.02s/it]\n\n\nExpected Output:\nOuter Loop:  33%|█████    | 1/3 [00:01&lt;00:02,  1.00s/it]\nInner Loop:  20%|██        | 1/5 [00:00&lt;00:01,  2.00s/it]\nInner Loop:  40%|████      | 2/5 [00:00&lt;00:01,  2.00s/it]\nInner Loop: 100%|██████████| 5/5 [00:01&lt;00:00,  2.00s/it]\nOuter Loop:  67%|████████  | 2/3 [00:02&lt;00:01,  1.00s/it]\n...\nOuter Loop: 100%|██████████| 3/3 [00:03&lt;00:00,  1.00s/it]\n\n✔ Shows real-time file download progress.\nCommon Tqdm Issues and Solutions :\nProgress Bar Not Updating A common issue with tqdm is the progress bar not updating, often due to output buffering, especially in Jupyter Notebooks. To fix this, use tqdm.notebook, which provides a GUI-based progress bar with color-coded status indicators: blue (normal), green (completed), and red (interrupted/error).\nFlushing the Output Stream Another solution is explicitly flushing the output stream to ensure real-time updates. By using sys.stdout.flush(), you force the buffered output to display immediately, preventing delays. However, frequent flushing may introduce performance overhead.\n\nimport sys\nimport time\nfrom tqdm import tqdm\n\nwith tqdm(total=50) as progress_bar:\n    for _ in range(50):\n        time.sleep(0.05)  # Simulating work\n        progress_bar.update(1)\n        sys.stdout.flush()  # Force immediate output update\n\n100%|██████████| 50/50 [00:02&lt;00:00, 19.52it/s]\n\n\nCOMPATABILITY ISSUES:\nTqdm is compatible in most Python environments, although there might be incompatibilities with custom output streams, third-party libraries, or version mismatches. Redirection of output to files or with unsupported streams will hinder correct display, while certain libraries can affect tqdm’s functionality. Version compatibility and the correction of any needed adjustments can resolve these conflicts.\n-Utilize supported output streams to guarantee the progress bar is correctly displayed.\n-Verify conflicts with third-party libraries and adjust settings if necessary.\n-Upgrade, downgrade, or request community support if compatibility issues continue.\nCONCLUSION\n\nTQDM is a light yet powerful Python library that adds progress bars to loops, downloads, and data processing with very little code modifications.\nIt’s light, fast, and highly flexible, with support for nested loops, multi-threading, and pandas.\nIt also facilitates debugging and monitoring, making it a must-have.\nThe one limitation is that it may not be ideal for extremely fast loops, but its strengths greatly outshine this slight limitation.\nIn programming, knowing how long something will take can be a lifesaver. Instead of sitting in the dark, tqdm provides you with accurate progress reports, making running more transparent and user-friendly.With tqdm, we don’t need to wait blindly,we know exactly how long to wait.\n\nREFERENCES:\n\nhttps://www.theoj.org/joss-papers/joss.01277/10.21105.joss.01277.pdf\n\n2)https://www.geeksforgeeks.org/python-how-to-make-a-terminal-progress-bar-using-tqdm/\n\nhttps://tqdm.github.io/\nhttps://www.datacamp.com/tutorial/tqdm-python"
  },
  {
    "objectID": "posts/visualisation.html",
    "href": "posts/visualisation.html",
    "title": "Simple Visualisation",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\nplt.plot(x, y)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quarto Template",
    "section": "",
    "text": "Quarto template Text!"
  }
]